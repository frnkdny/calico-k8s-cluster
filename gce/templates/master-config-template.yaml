#cloud-config
---
write_files:
  # nginx config
  - path: /etc/nginxconfig
    owner: root
    permissions: 0755
    content: |
      events {
        worker_connections  1024;
      }
      http {
        disable_symlinks off;
        server {
          root /usr/share/nginx/html;
          location / {
          }
        }
      }

  # Diags collection helper script:
  - path: /home/core/getcdiags.sh
    owner: root
    permissions: 0755
    content: |
      #!/bin/bash
      FILE=`calicoctl node diags | tail -1 | cut -f 7 -d " "`
      cat ${FILE}

  # Cloud provider configuration.
  - path: /etc/gce.conf
    owner: root
    permissions: 0755
    content: |
      [Global]
      node-instance-prefix=__CLUSTER_PREFIX__
      node-tags=__CLUSTER_PREFIX__

  # Need to configure localhost since GCE doesn't do it for us.
  # Specifically, the leader election container requires localhost
  # to resolve to 127.0.0.1
  - path: /etc/hosts
    owner: root
    permissions: 0644
    content: |
      127.0.0.1    localhost

  # NetworkPolicy object used by the test to allow traffic from
  # the "getter" pods to the nginx service.
  - path: /home/core/nginx-policy.yaml
    owner: root
    permissions: 0755
    content: |
      kind: NetworkPolicy
      apiVersion: extensions/v1beta1
      metadata:
        namespace: default
        name: nginx-service
      spec:
        podSelector:
          matchLabels:
            role: nginx-server
        ingress:
          - from:
              - podSelector:
                  matchLabels:
                    role: getter
            ports:
              - protocol: TCP
                port: 80

coreos:
  update:
    reboot-strategy: off
  etcd2:
    name: "etcdserver"
    initial-cluster: etcdserver=http://$private_ipv4:2380
    advertise-client-urls: http://$private_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://0.0.0.0:2380
    data-dir: /mnt/ssd/etcd2
  units:
    - name: "docker.service"
      drop-ins:
        - name: "50-insecure-registry.conf"
          content: |
            [Service]
            Environment=DOCKER_OPTS='--insecure-registry="__CLUSTER_PREFIX__-master:5000"'
    - name: "etcd2.service"
      command: "start"
      drop-ins:
        - name: 10-procs.conf
          content: |
            [Service]
            Environment=GOMAXPROCS=16
            LimitNOFILE=40000
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/sdb
        ExecStart=/usr/sbin/mkfs.btrfs -f /dev/sdb
    - name: mnt-ssd.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /mnt/ssd
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=fix-permission.service
        [Mount]
        What=/dev/sdb
        Where=/mnt/ssd
        DirectoryMode=0777
        Type=btrfs
    - name: fix-permission.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        Before=etcd2.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/chmod 777 /mnt/ssd
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd2.service
        After=etcd2.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__K8S_VER__/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStart=/opt/bin/kube-apiserver \
        --allow-privileged=true \
        --etcd-servers=http://$private_ipv4:2379 \
        --runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true \
        --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota \
        --insecure-bind-address=0.0.0.0 \
        --cloud-provider=gce \
        --cloud-config=/etc/gce.conf \
        --service-cluster-ip-range=10.100.0.0/24 \
        --storage-backend=etcd2 \
        --logtostderr=true
        Restart=always
        RestartSec=10
        LimitNOFILE=40000

    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__K8S_VER__/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStart=/opt/bin/kube-controller-manager \
        --master=$private_ipv4:8080 \
        --service-account-private-key-file=/var/run/kubernetes/apiserver.key \
        --root-ca-file=/var/run/kubernetes/apiserver.crt \
        --allocate-node-cidrs=true \
        --configure-cloud-routes=true \
        --cloud-provider=gce \
        --cloud-config=/etc/gce.conf \
        --cluster-name=__CLUSTER_PREFIX__ \
        --cluster-cidr=__POD_CIDR__ \
        --logtostderr=true
        Restart=always
        RestartSec=10

    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__K8S_VER__/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStart=/opt/bin/kube-scheduler --master=$private_ipv4:8080
        Restart=always
        RestartSec=10

    - name: kubelet.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=docker.service
        After=etcd2.service
        Requires=docker.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__K8S_VER__/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        ExecStartPre=/usr/bin/mkdir -p /tmp/cni-archive
        ExecStartPre=/usr/bin/wget -O /tmp/cni-archive/cni.tgz __CNI_PLUGIN_URL__
        ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/usr/bin/tar -C /opt/cni/bin -xzf /tmp/cni-archive/cni.tgz
        ExecStart=/opt/bin/kubelet \
        --port=10250 \
        --address=0.0.0.0 \
        --register-node=true \
        --register-schedulable=false \
        --allow-privileged=true \
        --cluster-dns=10.100.0.10 \
        --cluster-domain=cluster.local \
        --api-servers=http://$private_ipv4:8080 \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --cni-conf-dir=/etc/cni/net.d \
        --cni-bin-dir=/opt/cni/bin \
        --network-plugin=cni \
        --pod-infra-container-image=__POD_INFRA_IMAGE__ \
        --logtostderr=true
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kubelet.service
        After=kubelet.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin  https://storage.googleapis.com/kubernetes-release/release/__K8S_VER__/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        ExecStart=/opt/bin/kube-proxy \
        --master=http://$private_ipv4:8080 \
        --proxy-mode=iptables \
        --logtostderr=true
        Restart=always
        RestartSec=10

    # Installs the NetworkPolicy object used in the scale test.
    - name: install-policy.service
      command: start
      content: |
        [Unit]
        Description=Install Policy
        Requires=docker.service kube-apiserver.service
        After=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__K8S_VER__/bin/linux/amd64/kubectl
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubectl
        ExecStart=-/opt/bin/kubectl create -f /home/core/nginx-policy.yaml

        [Install]
        WantedBy=multi-user.target

    # Downloads binaries and serves them to other nodes in the cluster.  This is done
    # to minimize GET requests to GitHub, etc.
    - name: nginx.service
      command: start
      content: |
        [Unit]
        Description=Nginx
        Requires=docker.service
        After=docker.service

        [Service]
        ExecStartPre=/usr/bin/wget -O /tmp/calicoctl __CALICOCTL_URL__
        # Install calicoctl ready for diags collection
        ExecStartPre=/usr/bin/cp /tmp/calicoctl /opt/bin/calicoctl
        ExecStartPre=/usr/bin/chmod +x /opt/bin/calicoctl
        ExecStartPre=/usr/bin/wget -O /tmp/cni.tgz __CNI_PLUGIN_URL__
        ExecStartPre=-/usr/bin/docker kill mynginx
        ExecStartPre=-/usr/bin/docker rm mynginx
        ExecStartPre=/usr/bin/docker pull nginx
        ExecStart=/usr/bin/docker run --name mynginx -p 80:80 -v /tmp:/usr/share/nginx/html:ro -v /etc/nginxconfig:/etc/nginx/nginx.conf:ro -v /opt/bin:/opt/bin:ro -d nginx
        Restart=on-failure
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    # Local Docker registry - nodes pull various images from here.
    - name: registry.service
      command: start
      content: |
        [Unit]
        Description=registry
        Requires=docker.service
        After=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill registry
        ExecStartPre=-/usr/bin/docker rm registry
        ExecStartPre=-/usr/bin/docker pull registry:2
        ExecStartPre=-/usr/bin/docker pull __NODE_IMAGE__
        ExecStartPre=-/usr/bin/docker tag __NODE_IMAGE__ __CLUSTER_PREFIX__-master:5000/calico-node
        ExecStartPre=-/usr/bin/docker pull __CALICO_CNI_IMAGE__
        ExecStartPre=-/usr/bin/docker tag __CALICO_CNI_IMAGE__ __CLUSTER_PREFIX__-master:5000/calico-cni
        ExecStartPre=-/usr/bin/docker pull prom/node-exporter:latest
        ExecStartPre=-/usr/bin/docker tag prom/node-exporter:latest __CLUSTER_PREFIX__-master:5000/node-exporter
        ExecStartPre=-/usr/bin/docker pull __GETTER_IMAGE__
        ExecStartPre=-/usr/bin/docker tag __GETTER_IMAGE__ __CLUSTER_PREFIX__-master:5000/getter
        ExecStartPre=-/usr/bin/docker pull calico/routereflector:latest
        ExecStartPre=-/usr/bin/docker tag calico/routereflector:latest __CLUSTER_PREFIX__-master:5000/routereflector
        ExecStart=/usr/bin/docker run -p 5000:5000 --name registry registry:2
        ExecStartPost=/bin/sleep 5
        ExecStartPost=/usr/bin/docker push __CLUSTER_PREFIX__-master:5000/calico-node
        ExecStartPost=/usr/bin/docker push __CLUSTER_PREFIX__-master:5000/calico-cni
        ExecStartPost=/usr/bin/docker push __CLUSTER_PREFIX__-master:5000/node-exporter
        ExecStartPost=/usr/bin/docker push __CLUSTER_PREFIX__-master:5000/getter
        ExecStartPost=/usr/bin/docker push __CLUSTER_PREFIX__-master:5000/routereflector

        [Install]
        WantedBy=multi-user.target
